public class X {

    // todo:
    // pluck(listOfFields)
    // object: size
    // list: count!, max, min, first(n), last(n), compact
 
    public static void debug(Object obj) {
      system.debug('\n\n\n' + String.valueOf(obj) + '\n\n\n');    
    }
                     
    public static void debug(String label, Object obj) {
      system.debug('\n\n\n' + label + ':\n' + String.valueOf(obj) + '\n\n\n'); 
    }
    
    public static Boolean value(Boolean arg) {
        if (arg == null)
            return false;
        return arg;
    }
    
    public static Integer value(Integer arg) {
        if (arg == null)
            return 0;
        return arg;
    }
    
    public static String value(String arg) {
        if (arg == null)
            return '';
        return arg;
    }
    
    public static Decimal value(Decimal arg) {
        if (arg == null)
            return 0.0;
        return arg;
    }
    
    public static Long value(Long arg) {
        if (arg == null)
            return 0;
        return arg;
    }
    
    public static List<Object> pluck(List<sObject> objList, String fieldName) {
        List<Object> valuesList = new List<Object>();
        for (sObject obj : objList) {
            valuesList.add(obj.get(fieldName));
        }
        return valuesList;
    }
    

    public static List<sObject> find(List<sObject> objList, String fieldName, Object value) {
        List<sObject> matchingObjectsList = new List<sObject>();
        for (sObject obj : objList) {
            if (obj.get(fieldName) == value) {
                matchingObjectsList.add(obj);
            }
        }
        return matchingObjectsList;
    }
    
    public static List<sObject> find(List<sObject> objList, Map<String, Object> keyValue) {
        List<sObject> matchingObjectsList = new List<sObject>();
        for (sObject obj : objList) {
            boolean matches = true;
            for (String key : keyValue.keySet()) {
                if (obj.get(key) != keyValue.get(key)) {
                  matches = false;
                  continue;
                }
            }
            if (matches) {
                matchingObjectsList.add(obj);
            }
        }
        return matchingObjectsList;
    }
    
    public static sObject findFirst(List<sObject> objList, String fieldName, Object value) {
        for (sObject obj : objList) {
            if (obj.get(fieldName) == value) {
               return obj;
            }
        }
        return null;
    }
    
    public static sObject findFirst(List<sObject> objList, Map<String, Object> keyValue) {
        for (sObject obj : objList) {
            boolean matches = true;
            for (String key : keyValue.keySet()) {
                if (obj.get(key) != keyValue.get(key)) {
                  matches = false;
                  continue;
                }
            }
            if (matches) {
                return obj;
            }
        }
        return null;
    }
    
    public static boolean every(List<sObject> objList, String fieldName, Object value) {
        for (sObject obj : objList) {
            if (obj.get(fieldName) != value) {
               return false;
            }
        }
        return true;
    }
    
    public static boolean every(List<sObject> objList, Map<String, Object> keyValue) {
        for (sObject obj : objList) {
            boolean matches = true;
            for (String key : keyValue.keySet()) {
                if (obj.get(key) != keyValue.get(key)) {
                  return false;
                }
            }
        }
        return true;
    }
    
    public static boolean some(List<sObject> objList, String fieldName, Object value) {
        for (sObject obj : objList) {
            if (obj.get(fieldName) == value) {
               return true;
            }
        }
        return false;
    }
    
    public static boolean some(List<sObject> objList, Map<String, Object> keyValue) {
        List<sObject> matchingObjectsList = new List<sObject>();
        for (sObject obj : objList) {
            boolean matches = true;
            for (String key : keyValue.keySet()) {
                if (obj.get(key) != keyValue.get(key)) {
                  matches = false;
                  continue;
                }
            }
            if (matches) {
                return true;
            }
        }
        return false;
    }
    
    public static Set<Object> values(List<sObject> objList, String fieldName) {
        Set<Object> valuesSet = new Set<Object>();
        for (sObject obj : objList) {
            if (obj.get(fieldName) != null) {
                valuesSet.add(obj);
            }
        }
        return valuesSet;
    }
    
    public static integer indexOf(List<sObject> objList, String fieldName, Object value) {
        for (integer i = 0; i < objList.size(); i++) {
            if (objList.get(i).get(fieldName) == value) {
               return i;
            }
        }
        return null;
    }
    
    public static integer indexOf(List<Object> objList, Object value) {
        for (integer i = 0; i < objList.size(); i++) {
            if (objList.get(i) == value) {
               return i;
            }
        }
        return null;
    }

    public static integer indexOf(List<sObject> objList, Map<String, Object> keyValue) {
        List<sObject> matchingObjectsList = new List<sObject>();
        for (integer i = 0; i < objList.size(); i++) {
            boolean matches = true;
            for (String key : keyValue.keySet()) {
                if (objList.get(i).get(key) != keyValue.get(key)) {
                  matches = false;
                  continue;
                }
            }
            if (matches) {
                return i;
            }
        }
        return null;
    }
    

    private static Set<String> sObjectKeySet(sObject obj) {
        Schema.SObjectType objType = obj.getSObjectType();
        Schema.DescribeSObjectResult objTypeDescribe = objType.getDescribe();
        return objTypeDescribe.fields.getMap().keySet();        
    }
    
    public static Set<String> keySet(sObject obj) {
        Set<String> keySet = new Set<String>();
        for (String string_i : sObjectKeySet(obj)) {
            if (obj.get(string_i) != null)
                keySet.add(string_i);
        }
        return keySet;
    }
    
    public static Map<String, Object> keyValueMap(sObject obj) {
        Map<String, Object> keyValueMap = new Map<String, Object>();
        for (String string_i : sObjectKeySet(obj)) {
            if (obj.get(string_i) != null)
                keyValueMap.put(string_i, obj.get(string_i));
        }
        return keyValueMap;
    }
    
    public static sObject refine(sObject first, sObject second) {
        // todo: check if both objects are the same type of
        boolean valid = first != null &&
                        second != null &&
                        first.id != null &&
                        second.id != null &&
                        first.id == second.id;
        if (valid) {
            sObject merged = first.clone();
            for (String string_i : sObjectKeySet(second)) {
                merged.put(string_i, second.get(string_i));
            }
            return merged;
        } else {
            return null;
        }
    }
    
    public static String objectName(sObject obj) {
        Schema.SObjectType objType = obj.getSObjectType();
        Schema.DescribeSObjectResult objTypeDescribe = objType.getDescribe();
        return objTypeDescribe.getName();
    }
}